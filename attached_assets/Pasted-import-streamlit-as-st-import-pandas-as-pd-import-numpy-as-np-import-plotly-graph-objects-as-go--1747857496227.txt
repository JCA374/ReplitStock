import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime

# Import our database integration functions
from data.db_integration import (
    get_watchlist, get_all_cached_stocks, get_cached_stock_data,
    get_cached_fundamentals, get_all_fundamentals
)
from analysis.scanner import scan_stocks
from analysis.technical import calculate_all_indicators, generate_technical_signals
from analysis.fundamental import analyze_fundamentals
from config import SCANNER_CRITERIA

def display_enhanced_scanner():
    st.header("Enhanced Stock Scanner")
    st.write("Scan stocks based on combined database data with advanced ranking and filtering")
    
    # Sidebar for scanner configuration
    st.sidebar.header("Scanner Settings")
    
    # Select scan scope
    scan_scope = st.sidebar.radio(
        "Scan Scope:",
        ["All Available Stocks", "Watchlist Only", "Small Cap", "Mid Cap", "Large Cap"],
        key="scanner_scope"
    )
    
    # Get available stocks for information
    watchlist = get_watchlist()
    all_stocks = get_all_cached_stocks()
    
    # Show available stocks count
    if scan_scope == "Watchlist Only":
        st.sidebar.info(f"Watchlist contains {len(watchlist)} stocks")
    else:
        st.sidebar.info(f"Database contains {len(all_stocks)} stocks")
    
    # Database selection
    st.sidebar.subheader("Data Sources")
    use_supabase = st.sidebar.checkbox("Use Supabase", value=True)
    use_sqlite = st.sidebar.checkbox("Use SQLite", value=True)
    
    if not use_supabase and not use_sqlite:
        st.warning("At least one database source must be selected.")
        use_sqlite = True
    
    # Strategy Selection
    st.sidebar.subheader("Strategy")
    
    strategy_option = st.sidebar.radio(
        "Scanner Mode:",
        ["Value & Momentum Strategy", "Custom Criteria", "Combined Ranking"],
        key="scanner_strategy"
    )
    
    # Dictionary to store selected criteria
    selected_criteria = {}
    
    if strategy_option == "Value & Momentum Strategy":
        # Use the Value & Momentum Strategy
        selected_criteria["strategy"] = "value_momentum"
    
    # Custom filter options
    if strategy_option != "Value & Momentum Strategy":
        st.sidebar.subheader("Custom Criteria")
        
        # Technical criteria
        with st.sidebar.expander("Technical Filters", expanded=True):
            # Price vs moving averages
            price_sma_option = st.selectbox(
                "Price vs. SMA:",
                ["None", "Price Above SMA", "Price Below SMA"],
                key="scanner_price_sma"
            )
            
            if price_sma_option != "None":
                sma_period = st.selectbox(
                    "SMA Period:",
                    [20, 50, 200],
                    key="scanner_sma_period"
                )
                
                if price_sma_option == "Price Above SMA":
                    selected_criteria["price_above_sma"] = sma_period
                else:
                    selected_criteria["price_below_sma"] = sma_period
            
            # RSI Conditions
            rsi_option = st.selectbox(
                "RSI Condition:",
                ["None", "Overbought (RSI > 70)", "Oversold (RSI < 30)", "RSI > 50", "RSI < 50"],
                key="scanner_rsi"
            )
            
            if rsi_option == "Overbought (RSI > 70)":
                selected_criteria["rsi_overbought"] = True
            elif rsi_option == "Oversold (RSI < 30)":
                selected_criteria["rsi_oversold"] = True
            elif rsi_option == "RSI > 50":
                selected_criteria["rsi_above_50"] = True
            elif rsi_option == "RSI < 50":
                selected_criteria["rsi_below_50"] = True
            
            # MACD Signals
            macd_option = st.selectbox(
                "MACD Signal:",
                ["None", "Bullish Cross", "Bearish Cross"],
                key="scanner_macd"
            )
            
            if macd_option == "Bullish Cross":
                selected_criteria["macd_bullish"] = True
            elif macd_option == "Bearish Cross":
                selected_criteria["macd_bearish"] = True
            
            # Price levels
            price_level_option = st.selectbox(
                "Price Level:",
                ["None", "Near 52-Week High", "Near 52-Week Low"],
                key="scanner_price_level"
            )
            
            if price_level_option == "Near 52-Week High":
                selected_criteria["price_near_52w_high"] = True
            elif price_level_option == "Near 52-Week Low":
                selected_criteria["price_near_52w_low"] = True
                
            # Breakout detection
            breakout_option = st.checkbox("Recent Breakout", key="scanner_breakout")
            if breakout_option:
                selected_criteria["breakout"] = True
            
            # Minimum tech score
            min_tech_score = st.slider(
                "Minimum Tech Score:",
                0, 100, 0,
                key="scanner_min_tech_score"
            )
            
            if min_tech_score > 0:
                selected_criteria["min_tech_score"] = min_tech_score
        
        # Fundamental criteria
        with st.sidebar.expander("Fundamental Filters", expanded=True):
            # P/E Ratio
            pe_option = st.selectbox(
                "P/E Ratio:",
                ["None", "Below Value", "Above Value", "Between Values"],
                key="scanner_pe"
            )
            
            if pe_option == "Below Value":
                pe_value = st.slider(
                    "P/E Below:",
                    min_value=1.0,
                    max_value=50.0,
                    value=15.0,
                    step=0.5,
                    key="scanner_pe_below"
                )
                selected_criteria["pe_below"] = pe_value
            elif pe_option == "Above Value":
                pe_value = st.slider(
                    "P/E Above:",
                    min_value=1.0,
                    max_value=50.0,
                    value=20.0,
                    step=0.5,
                    key="scanner_pe_above"
                )
                selected_criteria["pe_above"] = pe_value
            elif pe_option == "Between Values":
                pe_min, pe_max = st.slider(
                    "P/E Range:",
                    min_value=1.0,
                    max_value=100.0,
                    value=(10.0, 30.0),
                    step=0.5,
                    key="scanner_pe_range"
                )
                selected_criteria["pe_above"] = pe_min
                selected_criteria["pe_below"] = pe_max
            
            # Profit Margin
            profit_margin_option = st.checkbox(
                "Minimum Profit Margin",
                key="scanner_profit_margin_check"
            )
            
            if profit_margin_option:
                profit_margin_value = st.slider(
                    "Profit Margin Above (%):",
                    min_value=0.0,
                    max_value=30.0,
                    value=10.0,
                    step=0.5,
                    key="scanner_profit_margin"
                )
                selected_criteria["profit_margin_above"] = profit_margin_value / 100
            
            # Revenue Growth
            revenue_growth_option = st.checkbox(
                "Minimum Revenue Growth",
                key="scanner_revenue_growth_check"
            )
            
            if revenue_growth_option:
                revenue_growth_value = st.slider(
                    "Revenue Growth Above (%):",
                    min_value=0.0,
                    max_value=50.0,
                    value=5.0,
                    step=0.5,
                    key="scanner_revenue_growth"
                )
                selected_criteria["revenue_growth_above"] = revenue_growth_value / 100
                
            # Profitability filter
            profitability_option = st.checkbox(
                "Profitable Companies Only",
                key="scanner_profitability"
            )
            
            if profitability_option:
                selected_criteria["is_profitable"] = True
                
            # Industry/Sector filter
            sectors_available = ["Technology", "Healthcare", "Financials", "Consumer Cyclical", 
                               "Consumer Defensive", "Industrials", "Basic Materials", 
                               "Energy", "Communication Services", "Utilities", "Real Estate"]
            
            selected_sectors = st.multiselect(
                "Filter by Sectors:",
                options=sectors_available,
                key="scanner_sectors"
            )
            
            if selected_sectors:
                selected_criteria["sectors"] = selected_sectors
    
    # Data source filter (separate from database selection)
    st.sidebar.subheader("Data Source Filter")
    data_sources = st.sidebar.multiselect(
        "Data Sources to Include:",
        ["yahoo", "alphavantage", "local"],
        default=["yahoo", "alphavantage", "local"],
        key="scanner_data_sources"
    )
    
    if data_sources:
        selected_criteria["data_sources"] = data_sources
    
    # Run Scanner button
    run_scanner = st.sidebar.button("Run Scanner", use_container_width=True, type="primary")
    
    # Initialize our custom scanning utility function
    def run_custom_scan(criteria, scan_scope, use_supabase, use_sqlite):
        """Custom scanning function that combines data from both databases."""
        # Determine which stocks to scan
        if scan_scope == "Watchlist Only":
            stocks_to_scan = [item['ticker'] for item in get_watchlist()]
        elif scan_scope == "Small Cap":
            try:
                small_cap_df = pd.read_csv('data/updated_small.csv')
                stocks_to_scan = small_cap_df['YahooTicker'].tolist()
            except Exception as e:
                st.error(f"Error loading Small Cap CSV: {e}")
                stocks_to_scan = []
        elif scan_scope == "Mid Cap":
            try:
                mid_cap_df = pd.read_csv('data/updated_mid.csv')
                stocks_to_scan = mid_cap_df['YahooTicker'].tolist()
            except Exception as e:
                st.error(f"Error loading Mid Cap CSV: {e}")
                stocks_to_scan = []
        elif scan_scope == "Large Cap":
            try:
                large_cap_df = pd.read_csv('data/updated_large.csv')
                stocks_to_scan = large_cap_df['YahooTicker'].tolist()
            except Exception as e:
                st.error(f"Error loading Large Cap CSV: {e}")
                stocks_to_scan = []
        else:
            # All stocks
            stocks_to_scan = get_all_cached_stocks()
        
        if not stocks_to_scan:
            st.warning("No stocks found to scan.")
            return []
            
        # Create progress indicators
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Get data from both databases
        # Here you would implement the get_combined_data function
        # For now, just use scan_stocks with progress updates
        results = []
        total_stocks = len(stocks_to_scan)
        
        for i, ticker in enumerate(stocks_to_scan):
            # Update progress
            progress = (i + 1) / total_stocks
            progress_bar.progress(progress)
            status_text.info(f"Analyzing {ticker} ({i+1}/{total_stocks})")
            
            try:
                # Get data from specified databases
                stock_data = None
                fundamentals = None
                
                if use_supabase:
                    from data.supabase_client import get_supabase_db
                    supabase_db = get_supabase_db()
                    if supabase_db.is_connected():
                        stock_data = supabase_db.get_cached_stock_data(ticker, '1wk', '1y', 'yahoo')
                        fundamentals = supabase_db.get_cached_fundamentals(ticker)
                
                if stock_data is None and use_sqlite:
                    stock_data = get_cached_stock_data(ticker, '1wk', '1y', 'yahoo')
                    
                if fundamentals is None and use_sqlite:
                    fundamentals = get_cached_fundamentals(ticker)
                
                if stock_data is None:
                    continue  # Skip if no data found
                
                # Calculate technical indicators
                indicators = calculate_all_indicators(stock_data)
                
                # Generate technical signals
                signals = generate_technical_signals(indicators)
                
                # Analyze fundamentals if available
                fundamental_analysis = analyze_fundamentals(fundamentals if fundamentals else {})
                
                # Create result dictionary
                result = {
                    "ticker": ticker,
                    "name": fundamentals.get("name", ticker) if fundamentals else ticker,
                    "price": stock_data['close'].iloc[-1] if not stock_data.empty else None,
                    "date": datetime.now().strftime("%Y-%m-%d"),
                    # Technical indicators
                    "tech_score": signals.get('tech_score', 0),
                    "signal": signals.get('overall_signal', 'HOLD'),
                    "above_ma40": signals.get('above_ma40', False),
                    "above_ma4": signals.get('above_ma4', False),
                    "rsi": signals.get('rsi_value', None),
                    "rsi_above_50": signals.get('rsi_above_50', False),
                    "near_52w_high": signals.get('near_52w_high', False),
                    "breakout": signals.get('breakout', False),
                    # Fundamental indicators
                    "pe_ratio": fundamentals.get('pe_ratio') if fundamentals else None,
                    "profit_margin": fundamentals.get('profit_margin') if fundamentals else None,
                    "revenue_growth": fundamentals.get('revenue_growth') if fundamentals else None,
                    "is_profitable": fundamental_analysis.get('overall', {}).get('is_profitable', False),
                    "sector": fundamentals.get('sector', "") if fundamentals else "",
                    "exchange": fundamentals.get('exchange', "") if fundamentals else "",
                    # Additional info
                    "data_source": "supabase" if stock_data and use_supabase else "local"
                }
                
                # Apply custom criteria filtering
                include_result = True
                
                # Check criteria
                for key, value in criteria.items():
                    if key == "strategy":
                        # Skip strategy flag - handled elsewhere
                        continue
                    elif key == "data_sources" and value:
                        # Filter by data source
                        if result.get("data_source") not in value:
                            include_result = False
                            break
                    elif key == "sectors" and value:
                        # Filter by sector
                        if result.get("sector") not in value:
                            include_result = False
                            break
                    elif key == "min_tech_score":
                        if result.get("tech_score", 0) < value:
                            include_result = False
                            break
                    elif key == "price_above_sma":
                        if not signals.get(f'price_above_sma_{value}', False):
                            include_result = False
                            break
                    elif key == "price_below_sma":
                        if signals.get(f'price_above_sma_{value}', True):
                            include_result = False
                            break
                    elif key == "rsi_overbought":
                        if not signals.get('rsi_overbought', False):
                            include_result = False
                            break
                    elif key == "rsi_oversold":
                        if not signals.get('rsi_oversold', False):
                            include_result = False
                            break
                    elif key == "rsi_above_50":
                        if not signals.get('rsi_above_50', False):
                            include_result = False
                            break
                    elif key == "rsi_below_50":
                        if signals.get('rsi_above_50', True):
                            include_result = False
                            break
                    elif key == "pe_below" and result.get("pe_ratio") is not None:
                        if result["pe_ratio"] > value:
                            include_result = False
                            break
                    elif key == "pe_above" and result.get("pe_ratio") is not None:
                        if result["pe_ratio"] < value:
                            include_result = False
                            break
                    elif key == "profit_margin_above" and result.get("profit_margin") is not None:
                        if result["profit_margin"] < value:
                            include_result = False
                            break
                    elif key == "revenue_growth_above" and result.get("revenue_growth") is not None:
                        if result["revenue_growth"] < value:
                            include_result = False
                            break
                    elif key == "is_profitable":
                        if not result.get("is_profitable", False):
                            include_result = False
                            break
                
                if include_result:
                    results.append(result)
            except Exception as e:
                st.error(f"Error analyzing {ticker}: {e}")
        
        # Complete progress
        progress_bar.progress(1.0)
        status_text.empty()
        
        # Rank the results if needed
        if strategy_option == "Combined Ranking" or strategy_option == "Value & Momentum Strategy":
            # Import our ranking function
            # Implement rank_stocks as a function that calculates comprehensive score
            def rank_stocks(results_list):
                """Rank stocks based on combined technical and fundamental factors."""
                # Define weights for different factors
                weights = {
                    # Technical factors (60% of total score)
                    'tech_score': 30,                 # Base technical score
                    'above_ma40': 10,                 # Primary trend
                    'above_ma4': 5,                   # Short-term momentum
                    'rsi_above_50': 5,                # RSI momentum
                    'near_52w_high': 5,               # Relative strength
                    'breakout': 5,                    # Breakout factor
                    
                    # Fundamental factors (40% of total score)
                    'is_profitable': 15,              # Profitability
                    'reasonable_pe': 10,              # PE ratio is reasonable 
                    'revenue_growth_positive': 10,    # Revenue growth
                    'profit_margin_positive': 5       # Profit margin 
                }
                
                for result in results_list:
                    total_score = 0
                    applied_weights = 0
                    
                    # Add tech score component
                    if 'tech_score' in result and result['tech_score'] is not None:
                        total_score += weights['tech_score'] * (result['tech_score'] / 100.0)
                        applied_weights += weights['tech_score']
                    
                    # Add technical indicator components
                    for factor in ['above_ma40', 'above_ma4', 'rsi_above_50', 'near_52w_high', 'breakout']:
                        if factor in result and result[factor] is not None:
                            if result[factor]:  # True gets full weight
                                total_score += weights[factor]
                            applied_weights += weights[factor]
                    
                    # Add fundamental components
                    if 'is_profitable' in result and result['is_profitable']:
                        total_score += weights['is_profitable']
                    applied_weights += weights['is_profitable']
                    
                    # Reasonable PE (between 0 and 30)
                    if 'pe_ratio' in result and result['pe_ratio'] is not None:
                        if 0 < result['pe_ratio'] < 30:
                            total_score += weights['reasonable_pe']
                        applied_weights += weights['reasonable_pe']
                    
                    # Positive revenue growth
                    if 'revenue_growth' in result and result['revenue_growth'] is not None:
                        if result['revenue_growth'] > 0:
                            total_score += weights['revenue_growth_positive']
                        applied_weights += weights['revenue_growth_positive']
                    
                    # Positive profit margin
                    if 'profit_margin' in result and result['profit_margin'] is not None:
                        if result['profit_margin'] > 0:
                            total_score += weights['profit_margin_positive']
                        applied_weights += weights['profit_margin_positive']
                    
                    # Calculate normalized score (0-100)
                    if applied_weights > 0:
                        overall_score = (total_score / applied_weights) * 100
                    else:
                        overall_score = 0
                    
                    # Add overall score to result
                    result['overall_score'] = round(overall_score, 1)
                
                # Sort by overall score (descending)
                results_list.sort(key=lambda x: x.get('overall_score', 0), reverse=True)
                
                # Add rank to each result
                for i, result in enumerate(results_list):
                    result['rank'] = i + 1
                
                return results_list
            
            # Apply ranking
            results = rank_stocks(results)
        
        return results
    
    # Checking if scanner results exist
    has_results = False
    
    # Run scanner on button press or auto-run
    results = []
    
    # Auto-run on first load for Value & Momentum Strategy
    if 'scanner_auto_run' not in st.session_state and strategy_option == "Value & Momentum Strategy":
        # Set auto-run flag to avoid running again
        st.session_state.scanner_auto_run = True
        
        # Execute scan with Value & Momentum Strategy
        with st.spinner("Running Value & Momentum Strategy scan..."):
            results = run_custom_scan(selected_criteria, scan_scope, use_supabase, use_sqlite)
            
            if results:
                # Store results in session state
                st.session_state.scan_results = results
                has_results = True
    
    # Normal run button behavior
    if run_scanner:
        if not selected_criteria and strategy_option != "Value & Momentum Strategy":
            st.warning("Please select at least one criterion")
        else:
            # Show criteria summary
            st.subheader("Scanning with the following criteria:")
            
            criteria_list = []
            
            for criterion, value in selected_criteria.items():
                display_name = SCANNER_CRITERIA.get(criterion, criterion.replace('_', ' ').title())
                
                if isinstance(value, bool):
                    criteria_list.append(f"- {display_name}")
                else:
                    criteria_list.append(f"- {display_name}: {value}")
            
            for item in criteria_list:
                st.write(item)
            
            # Run the scanner with progress indicator
            with st.spinner("Scanning stocks..."):
                results = run_custom_scan(selected_criteria, scan_scope, use_supabase, use_sqlite)
                
                if results:
                    st.session_state.scan_results = results
                    has_results = True
    
    # Retrieve results from session state if available
    if not has_results and hasattr(st.session_state, 'scan_results') and st.session_state.scan_results:
        results = st.session_state.scan_results
        has_results = True
    
    # Display results
    if has_results and results:
        # Create instance of StockFilter 
        class StockFilter:
            """Advanced filtering system for stock analysis results."""
            
            def __init__(self, analysis_results):
                """Initialize with analysis results."""
                self.all_results = analysis_results
                self.filtered_results = analysis_results
                self.applied_filters = []
            
            def reset_filters(self):
                """Reset all filters."""
                self.filtered_results = self.all_results
                self.applied_filters = []
                return self
            
            def apply_filter(self, filter_func, description):
                """Apply a filter function to the results."""
                self.filtered_results = list(filter(filter_func, self.filtered_results))
                self.applied_filters.append(description)
                return self
            
            # Technical filters
            def filter_by_tech_score(self, min_score=0, max_score=100):
                """Filter by technical score range."""
                return self.apply_filter(
                    lambda x: "tech_score" in x and x["tech_score"] is not None and min_score <= x["tech_score"] <= max_score,
                    f"Tech Score between {min_score} and {max_score}"
                )
            
            def filter_by_rsi(self, min_rsi=0, max_rsi=100):
                """Filter by RSI value range."""
                return self.apply_filter(
                    lambda x: "rsi" in x and x["rsi"] is not None and min_rsi <= x["rsi"] <= max_rsi,
                    f"RSI between {min_rsi} and {max_rsi}"
                )
            
            def filter_above_ma40(self, above=True):
                """Filter stocks above/below MA40."""
                return self.apply_filter(
                    lambda x: "above_ma40" in x and x["above_ma40"] == above,
                    f"{'Above' if above else 'Below'} MA40"
                )
            
            def filter_above_ma4(self, above=True):
                """Filter stocks above/below MA4."""
                return self.apply_filter(
                    lambda x: "above_ma4" in x and x["above_ma4"] == above,
                    f"{'Above' if above else 'Below'} MA4"
                )
            
            def filter_by_signal(self, signals=None):
                """Filter by buy/sell/hold signal."""
                if signals is None:
                    signals = ["BUY", "SELL", "HOLD"]
                
                return self.apply_filter(
                    lambda x: "signal" in x and x["signal"] in signals,
                    f"Signal is one of {', '.join(signals)}"
                )
            
            def filter_near_52w_high(self, near=True):
                """Filter stocks near 52-week high."""
                return self.apply_filter(
                    lambda x: "near_52w_high" in x and x["near_52w_high"] == near,
                    f"{'Near' if near else 'Not near'} 52-week high"
                )
            
            # Fundamental filters
            def filter_by_pe_ratio(self, min_pe=0, max_pe=100):
                """Filter by P/E ratio range."""
                return self.apply_filter(
                    lambda x: "pe_ratio" in x and x["pe_ratio"] is not None and min_pe <= x["pe_ratio"] <= max_pe,
                    f"P/E ratio between {min_pe} and {max_pe}"
                )
            
            def filter_profitable(self, profitable=True):
                """Filter profitable companies."""
                return self.apply_filter(
                    lambda x: "is_profitable" in x and x["is_profitable"] == profitable,
                    f"{'Profitable' if profitable else 'Not profitable'} companies"
                )
            
            def filter_by_profit_margin(self, min_margin=0):
                """Filter by minimum profit margin."""
                return self.apply_filter(
                    lambda x: "profit_margin" in x and x["profit_margin"] is not None and x["profit_margin"] >= min_margin,
                    f"Profit margin >= {min_margin*100}%"
                )
            
            def filter_by_revenue_growth(self, min_growth=0):
                """Filter by minimum revenue growth."""
                return self.apply_filter(
                    lambda x: "revenue_growth" in x and x["revenue_growth"] is not None and x["revenue_growth"] >= min_growth,
                    f"Revenue growth >= {min_growth*100}%"
                )
            
            # Combined filters
            def filter_by_overall_score(self, min_score=0, max_score=100):
                """Filter by overall score range."""
                return self.apply_filter(
                    lambda x: "overall_score" in x and x["overall_score"] is not None and min_score <= x["overall_score"] <= max_score,
                    f"Overall score between {min_score} and {max_score}"
                )
            
            def filter_by_data_source(self, sources=None):
                """Filter by data source."""
                if sources is None:
                    sources = ["yahoo", "alphavantage", "local", "supabase"]
                
                return self.apply_filter(
                    lambda x: "data_source" in x and x["data_source"] in sources,
                    f"Data source is one of {', '.join(sources)}"
                )
            
            def filter_by_sector(self, sectors=None):
                """Filter by sector."""
                if sectors is None or len(sectors) == 0:
                    return self
                
                return self.apply_filter(
                    lambda x: "sector" in x and x["sector"] in sectors,
                    f"Sector is one of {', '.join(sectors)}"
                )
            
            def get_results(self):
                """Get filtered results."""
                return self.filtered_results
            
            def get_applied_filters(self):
                """Get list of applied filters."""
                return self.applied_filters
        
        # Create filter instance
        stock_filter = StockFilter(results)
        
        # Display number of results
        st.subheader(f"Found {len(results)} matching stocks")
        
        # Create interactive filter controls
        with st.expander("Filter Results", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                # Technical filters
                st.markdown("**Technical Filters**")
                
                # Signal filter
                signal_filter = st.multiselect(
                    "Signal",
                    ["BUY", "HOLD", "SELL"],
                    default=["BUY", "HOLD", "SELL"],
                    key="result_signal_filter"
                )
                
                # MA40 filter
                ma40_filter = st.radio(
                    "Price vs MA40 (Primary Trend)",
                    ["All", "Above MA40", "Below MA40"],
                    horizontal=True,
                    key="result_ma40_filter"
                )
                
                # Tech score range
                tech_score_range = st.slider(
                    "Tech Score Range",
                    0, 100, (0, 100),
                    key="result_tech_score_range"
                )
                
                # RSI range
                rsi_range = st.slider(
                    "RSI Range",
                    0, 100, (0, 100),
                    key="result_rsi_range"
                )
            
            with col2:
                # Fundamental filters
                st.markdown("**Fundamental Filters**")
                
                # Profitability filter
                profitability_filter = st.radio(
                    "Profitability",
                    ["All", "Profitable Only", "Unprofitable Only"],
                    horizontal=True,
                    key="result_profitability_filter"
                )
                
                # P/E ratio range
                pe_min, pe_max = st.slider(
                    "P/E Ratio Range",
                    0.0, 100.0, (0.0, 100.0),
                    key="result_pe_ratio_range"
                )
                
                # Minimum profit margin
                min_profit_margin = st.slider(
                    "Minimum Profit Margin (%)",
                    0.0, 30.0, 0.0,
                    key="result_min_profit_margin"
                )
                
                # Minimum revenue growth
                min_revenue_growth = st.slider(
                    "Minimum Revenue Growth (%)",
                    0.0, 50.0, 0.0,
                    key="result_min_revenue_growth"
                )
            
            # Data source filter
            st.markdown("**Other Filters**")
            col3, col4 = st.columns(2)
            
            with col3:
                data_source_filter = st.multiselect(
                    "Data Source",
                    ["yahoo", "alphavantage", "local", "supabase"],
                    default=["yahoo", "alphavantage", "local", "supabase"],
                    key="result_data_source_filter"
                )
            
            with col4:
                # Extract unique sectors from results
                available_sectors = sorted(list(set([r.get("sector", "") for r in results if r.get("sector")])))
                
                sector_filter = st.multiselect(
                    "Sector",
                    available_sectors,
                    key="result_sector_filter"
                )
        
        # Apply filters
        # Signal filter
        if signal_filter and len(signal_filter) < 3:
            stock_filter.filter_by_signal(signal_filter)
        
        # MA40 filter
        if ma40_filter == "Above MA40":
            stock_filter.filter_above_ma40(True)
        elif ma40_filter == "Below MA40":
            stock_filter.filter_above_ma40(False)
        
        # Tech score range
        if tech_score_range != (0, 100):
            stock_filter.filter_by_tech_score(tech_score_range[0], tech_score_range[1])
        
        # RSI range
        if rsi_range != (0, 100):
            stock_filter.filter_by_rsi(rsi_range[0], rsi_range[1])
        
        # Profitability filter
        if profitability_filter == "Profitable Only":
            stock_filter.filter_profitable(True)
        elif profitability_filter == "Unprofitable Only":
            stock_filter.filter_profitable(False)
        
        # P/E ratio range
        if pe_min > 0 or pe_max < 100:
            stock_filter.filter_by_pe_ratio(pe_min, pe_max)
        
        # Minimum profit margin
        if min_profit_margin > 0:
            stock_filter.filter_by_profit_margin(min_profit_margin / 100)
        
        # Minimum revenue growth
        if min_revenue_growth > 0:
            stock_filter.filter_by_revenue_growth(min_revenue_growth / 100)
        
        # Data source filter
        if data_source_filter and len(data_source_filter) < 4:
            stock_filter.filter_by_data_source(data_source_filter)
        
        # Sector filter
        if sector_filter:
            stock_filter.filter_by_sector(sector_filter)
        
        # Get filtered results
        filtered_results = stock_filter.get_results()
        applied_filters = stock_filter.get_applied_filters()
        
        # Show filter summary if filters applied
        if applied_filters:
            st.markdown("**Applied Filters:**")
            for filter_desc in applied_filters:
                st.markdown(f"- {filter_desc}")
            
            # Add reset button
            if st.button("Reset Filters"):
                # Force rerun
                st.rerun()
        
        # Convert to DataFrame for display
        if filtered_results:
            # Create DataFrame
            results_df = pd.DataFrame(filtered_results)
            
            # Select and rename columns for display
            display_columns = {
                "rank": "Rank",
                "ticker": "Ticker",
                "name": "Name",
                "price": "Price",
                "signal": "Signal",
                "tech_score": "Tech Score",
                "overall_score": "Overall Score",
                "rsi": "RSI",
                "pe_ratio": "P/E Ratio",
                "profit_margin": "Profit Margin",
                "revenue_growth": "Revenue Growth",
                "data_source": "Data Source"
            }
            
            # Filter columns that exist
            available_columns = [col for col, display in display_columns.items() if col in results_df.columns]
            display_names = [display_columns[col] for col in available_columns]
            
            # Create display DataFrame
            display_df = results_df[available_columns].copy()
            display_df.columns = display_names
            
            # Format numeric columns
            if "Price" in display_df.columns:
                display_df["Price"] = display_df["Price"].apply(
                    lambda x: f"{x:.2f}" if pd.notna(x) else "N/A"
                )
            
            if "P/E Ratio" in display_df.columns:
                display_df["P/E Ratio"] = display_df["P/E Ratio"].apply(
                    lambda x: f"{x:.2f}" if pd.notna(x) else "N/A"
                )
            
            if "Profit Margin" in display_df.columns:
                display_df["Profit Margin"] = display_df["Profit Margin"].apply(
                    lambda x: f"{x:.2%}" if pd.notna(x) else "N/A"
                )
            
            if "Revenue Growth" in display_df.columns:
                display_df["Revenue Growth"] = display_df["Revenue Growth"].apply(
                    lambda x: f"{x:.2%}" if pd.notna(x) else "N/A"
                )
            
            if "RSI" in display_df.columns:
                display_df["RSI"] = display_df["RSI"].apply(
                    lambda x: f"{x:.1f}" if pd.notna(x) else "N/A"
                )
            
            # Display as table
            st.dataframe(
                display_df,
                use_container_width=True,
                column_config={
                    "Signal": st.column_config.Column(
                        "Signal",
                        help="Buy, Sell or Hold signal based on strategy",
                        width="small"
                    ),
                    "Tech Score": st.column_config.ProgressColumn(
                        "Tech Score",
                        help="Technical score 0-100",
                        min_value=0,
                        max_value=100,
                        format="%d"
                    ),
                    "Overall Score": st.column_config.ProgressColumn(
                        "Overall Score",
                        help="Combined technical and fundamental score 0-100",
                        min_value=0,
                        max_value=100,
                        format="%d"
                    ) if "Overall Score" in display_df.columns else None,
                    "Rank": st.column_config.NumberColumn(
                        "Rank",
                        help="Stock ranking",
                        format="%d"
                    ) if "Rank" in display_df.columns else None
                },
                hide_index=True
            )
            
            # Display visualizations
            st.subheader("Visualizations")
            
            tab1, tab2, tab3 = st.tabs(["Technical Scores", "Fundamental Metrics", "Combined Ranking"])
            
            with tab1:
                # Technical Score chart
                tech_chart_data = results_df[['ticker', 'tech_score', 'signal']].sort_values('tech_score', ascending=False).head(20)
                
                if not tech_chart_data.empty and 'tech_score' in tech_chart_data.columns:
                    tech_chart_data['signal_color'] = tech_chart_data['signal'].apply(
                        lambda x: 'green' if x == 'BUY' else 'red' if x == 'SELL' else 'orange'
                    )
                    
                    # Create horizontal bar chart
                    fig = go.Figure()
                    
                    fig.add_trace(go.Bar(
                        y=tech_chart_data['ticker'],
                        x=tech_chart_data['tech_score'],
                        orientation='h',
                        marker_color=tech_chart_data['signal_color'],
                        text=tech_chart_data['tech_score'],
                        textposition='auto'
                    ))
                    
                    fig.update_layout(
                        title="Top 20 Stocks by Technical Score",
                        xaxis_title="Technical Score",
                        yaxis_title="Ticker",
                        height=600,
                        margin=dict(l=0, r=0, t=40, b=0)
                    )
                    
                    # Add reference lines for score thresholds
                    fig.add_shape(
                        type="line",
                        x0=70,
                        y0=-1,
                        x1=70,
                        y1=len(tech_chart_data),
                        line=dict(
                            color="green",
                            width=1,
                            dash="dash",
                        )
                    )
                    
                    fig.add_shape(
                        type="line",
                        x0=40,
                        y0=-1,
                        x1=40,
                        y1=len(tech_chart_data),
                        line=dict(
                            color="red",
                            width=1,
                            dash="dash",
                        )
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Explanation of score thresholds
                    st.info("""
                    **Technical Score Interpretation:**
                    - **Above 70** (Green line): Strong technical strength - potential buy
                    - **40-70**: Moderate technical strength - monitor closely
                    - **Below 40** (Red line): Weak technical strength - potential sell/avoid
                    """)
                else:
                    st.info("No technical score data available for visualization")
            
            with tab2:
                # Extract fundamental data that exists
                fund_columns = ['ticker', 'pe_ratio', 'profit_margin', 'revenue_growth']
                existing_cols = [col for col in fund_columns if col in results_df.columns]
                
                if len(existing_cols) > 1:  # Need at least ticker and one metric
                    # PE ratio chart
                    if 'pe_ratio' in existing_cols:
                        pe_data = results_df[['ticker', 'pe_ratio']].dropna(subset=['pe_ratio']).sort_values('pe_ratio').head(20)
                        
                        if not pe_data.empty:
                            # Create color based on P/E range
                            pe_data['color'] = pe_data['pe_ratio'].apply(
                                lambda x: 'green' if x < 15 else 'red' if x > 30 else 'orange'
                            )
                            
                            # Create bar chart
                            fig = go.Figure()
                            
                            fig.add_trace(go.Bar(
                                x=pe_data['ticker'],
                                y=pe_data['pe_ratio'],
                                marker_color=pe_data['color'],
                                text=pe_data['pe_ratio'].apply(lambda x: f"{x:.2f}"),
                                textposition='auto'
                            ))
                            
                            fig.update_layout(
                                title="Stocks with Lowest P/E Ratios",
                                xaxis_title="Ticker",
                                yaxis_title="P/E Ratio",
                                height=400
                            )
                            
                            # Add reference lines for P/E thresholds
                            fig.add_shape(
                                type="line",
                                x0=-1,
                                y0=15,
                                x1=len(pe_data),
                                y1=15,
                                line=dict(
                                    color="green",
                                    width=1,
                                    dash="dash",
                                )
                            )
                            
                            fig.add_shape(
                                type="line",
                                x0=-1,
                                y0=30,
                                x1=len(pe_data),
                                y1=30,
                                line=dict(
                                    color="red",
                                    width=1,
                                    dash="dash",
                                )
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                    
                    # Profit margin chart
                    if 'profit_margin' in existing_cols:
                        margin_data = results_df[['ticker', 'profit_margin']].dropna(subset=['profit_margin']).sort_values('profit_margin', ascending=False).head(20)
                        
                        if not margin_data.empty:
                            # Create color based on profit margin
                            margin_data['color'] = margin_data['profit_margin'].apply(
                                lambda x: 'red' if x < 0 else 'orange' if x < 0.1 else 'green'
                            )
                            
                            # Create bar chart
                            fig = go.Figure()
                            
                            fig.add_trace(go.Bar(
                                x=margin_data['ticker'],
                                y=margin_data['profit_margin'],
                                marker_color=margin_data['color'],
                                text=margin_data['profit_margin'].apply(lambda x: f"{x:.2%}"),
                                textposition='auto'
                            ))
                            
                            fig.update_layout(
                                title="Top 20 Stocks by Profit Margin",
                                xaxis_title="Ticker",
                                yaxis_title="Profit Margin",
                                height=400
                            )
                            
                            # Add reference line for profit margin threshold
                            fig.add_shape(
                                type="line",
                                x0=-1,
                                y0=0.1,
                                x1=len(margin_data),
                                y1=0.1,
                                line=dict(
                                    color="green",
                                    width=1,
                                    dash="dash",
                                )
                            )
                            
                            fig.add_shape(
                                type="line",
                                x0=-1,
                                y0=0,
                                x1=len(margin_data),
                                y1=0,
                                line=dict(
                                    color="red",
                                    width=1,
                                    dash="dash",
                                )
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("No fundamental data available for visualization")
            
            with tab3:
                # Combined ranking chart (if available)
                if 'overall_score' in results_df.columns:
                    # Get top 20 by overall score
                    combined_data = results_df.sort_values('overall_score', ascending=False).head(20)
                    
                    if not combined_data.empty:
                        # Create horizontal bar chart
                        fig = go.Figure()
                        
                        # Color by signal if available
                        if 'signal' in combined_data.columns:
                            combined_data['signal_color'] = combined_data['signal'].apply(
                                lambda x: 'green' if x == 'BUY' else 'red' if x == 'SELL' else 'orange'
                            )
                            
                            fig.add_trace(go.Bar(
                                y=combined_data['ticker'],
                                x=combined_data['overall_score'],
                                orientation='h',
                                marker_color=combined_data['signal_color'],
                                text=combined_data['overall_score'].apply(lambda x: f"{x:.1f}"),
                                textposition='auto'
                            ))
                        else:
                            fig.add_trace(go.Bar(
                                y=combined_data['ticker'],
                                x=combined_data['overall_score'],
                                orientation='h',
                                marker_color='blue',
                                text=combined_data['overall_score'].apply(lambda x: f"{x:.1f}"),
                                textposition='auto'
                            ))
                        
                        fig.update_layout(
                            title="Top 20 Stocks by Combined Score",
                            xaxis_title="Combined Score",
                            yaxis_title="Ticker",
                            height=600,
                            margin=dict(l=0, r=0, t=40, b=0)
                        )
                        
                        # Add reference line for score threshold
                        fig.add_shape(
                            type="line",
                            x0=70,
                            y0=-1,
                            x1=70,
                            y1=len(combined_data),
                            line=dict(
                                color="green",
                                width=1,
                                dash="dash",
                            )
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Explanation of score
                        st.info("""
                        **Combined Score Interpretation:**
                        - The combined score considers both technical and fundamental factors
                        - Technical factors (60%): Trend, momentum, relative strength, breakouts
                        - Fundamental factors (40%): Profitability, PE ratio, growth metrics
                        - Scores above 70 indicate strong overall quality
                        """)
                    else:
                        st.info("No combined score data available for visualization")
                else:
                    st.info("Combined scoring not available. Use the 'Combined Ranking' strategy to see this visualization.")
            
            # Add detailed stock view
            st.subheader("Stock Details")
            selected_ticker = st.selectbox(
                "Select a stock for detailed analysis:",
                options=[result['ticker'] for result in filtered_results],
                key="result_detail_ticker"
            )
            
            if selected_ticker:
                # Find selected stock in results
                selected_stock = next((r for r in filtered_results if r['ticker'] == selected_ticker), None)
                
                if selected_stock:
                    # Create a detail view
                    col1, col2, col3 = st.columns([2, 2, 1])
                    
                    with col1:
                        st.markdown(f"**{selected_stock.get('name', selected_ticker)} ({selected_ticker})**")
                        st.metric("Price", f"{selected_stock.get('price', 'N/A')}")
                        signal_color = "green" if selected_stock.get('signal') == 'BUY' else "red" if selected_stock.get('signal') == 'SELL' else "orange"
                        st.markdown(f"<span style='color:{signal_color}; font-weight:bold'>Signal: {selected_stock.get('signal', 'N/A')}</span>", unsafe_allow_html=True)
                        
                        if 'overall_score' in selected_stock:
                            st.metric("Overall Score", f"{selected_stock['overall_score']:.1f}/100")
                        
                        st.metric("Tech Score", f"{selected_stock.get('tech_score', 'N/A')}/100")
                    
                    with col2:
                        st.markdown("**Technical Indicators**")
                        
                        # Create technical indicator metrics with colored backgrounds
                        indicators = [
                            {"name": "Above MA40", "value": selected_stock.get('above_ma40', False)},
                            {"name": "Above MA4", "value": selected_stock.get('above_ma4', False)},
                            {"name": "RSI > 50", "value": selected_stock.get('rsi_above_50', False)},
                            {"name": "Near 52w High", "value": selected_stock.get('near_52w_high', False)},
                            {"name": "Breakout", "value": selected_stock.get('breakout', False)}
                        ]
                        
                        for indicator in indicators:
                            bg_color = "#d4edda" if indicator["value"] else "#f8d7da"
                            text_color = "#155724" if indicator["value"] else "#721c24"
                            st.markdown(f"""
                            <div style="background-color:{bg_color}; 
                                       color:{text_color}; 
                                       padding:5px; border-radius:5px; margin-bottom:5px;">
                                <b>{indicator["name"]}:</b> {'Yes' if indicator["value"] else 'No'}
                            </div>
                            """, unsafe_allow_html=True)
                            
                        if 'rsi' in selected_stock and selected_stock['rsi'] is not None:
                            rsi_value = selected_stock['rsi']
                            st.markdown(f"**RSI Value:** {rsi_value:.1f}")
                    
                    with col3:
                        st.markdown("**Fundamental Data**")
                        
                        # Display fundamentals if available
                        pe_ratio = selected_stock.get('pe_ratio')
                        if pe_ratio is not None:
                            pe_color = "#d4edda" if 0 < pe_ratio < 15 else "#f8d7da" if pe_ratio > 30 or pe_ratio < 0 else "#fff3cd"
                            pe_text_color = "#155724" if 0 < pe_ratio < 15 else "#721c24" if pe_ratio > 30 or pe_ratio < 0 else "#856404"
                            st.markdown(f"""
                            <div style="background-color:{pe_color}; 
                                       color:{pe_text_color}; 
                                       padding:5px; border-radius:5px; margin-bottom:5px;">
                                <b>P/E Ratio:</b> {pe_ratio:.2f}
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("**P/E Ratio:** N/A")
                        
                        profit_margin = selected_stock.get('profit_margin')
                        if profit_margin is not None:
                            pm_color = "#d4edda" if profit_margin > 0.1 else "#f8d7da" if profit_margin < 0 else "#fff3cd"
                            pm_text_color = "#155724" if profit_margin > 0.1 else "#721c24" if profit_margin < 0 else "#856404"
                            st.markdown(f"""
                            <div style="background-color:{pm_color}; 
                                       color:{pm_text_color}; 
                                       padding:5px; border-radius:5px; margin-bottom:5px;">
                                <b>Profit Margin:</b> {profit_margin:.2%}
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("**Profit Margin:** N/A")
                        
                        revenue_growth = selected_stock.get('revenue_growth')
                        if revenue_growth is not None:
                            rg_color = "#d4edda" if revenue_growth > 0.05 else "#f8d7da" if revenue_growth < 0 else "#fff3cd"
                            rg_text_color = "#155724" if revenue_growth > 0.05 else "#721c24" if revenue_growth < 0 else "#856404"
                            st.markdown(f"""
                            <div style="background-color:{rg_color}; 
                                       color:{rg_text_color}; 
                                       padding:5px; border-radius:5px; margin-bottom:5px;">
                                <b>Revenue Growth:</b> {revenue_growth:.2%}
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("**Revenue Growth:** N/A")
                        
                        # Display sector if available
                        sector = selected_stock.get('sector')
                        if sector:
                            st.markdown(f"**Sector:** {sector}")
                            
                    # Add button to open the single stock analysis page with this ticker
                    if st.button(f"Open In-Depth Analysis for {selected_ticker}"):
                        # Store ticker in session state to be used by the single stock analysis page
                        st.session_state.single_analysis_ticker = selected_ticker
                        # Prepare to redirect to the single stock analysis page
                        st.info(f"Opening in-depth analysis for {selected_ticker}...")
                        # You would need to implement a way to switch to the single stock page
                        # This might involve setting a session state variable to switch tabs
            
            # Download results as CSV
            csv = display_df.to_csv(index=False)
            st.download_button(
                label="Download Results as CSV",
                data=csv,
                file_name="stock_scanner_results.csv",
                mime="text/csv"
            )
        else:
            st.warning("No stocks match the current filters. Try adjusting your filter criteria.")
    else:
        if run_scanner:
            st.warning("No stocks match the selected criteria. Try adjusting your criteria.")
        else:
            # Show instructions when no scan has been run
            st.info("Configure your scan criteria using the sidebar, then click 'Run Scanner'")
            
            # Show example image
            st.image("https://images.pexels.com/photos/6770610/pexels-photo-6770610.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750", 
                    caption="Stock Scanner helps you find stocks matching your criteria")
            
            # Display scanner features
            st.subheader("Enhanced Scanner Features")
            
            features = [
                "**Combined Database Access**: Utilizes data from both Supabase and SQLite databases",
                "**Advanced Filtering System**: Filter by both technical and fundamental criteria",
                "**Comprehensive Ranking**: Ranks stocks based on weighted technical and fundamental factors",
                "**Interactive Visualizations**: Visual comparison of stocks across multiple dimensions",
                "**Detailed Stock View**: In-depth analysis of individual stocks",
                "**Multiple Scan Modes**: Value & Momentum Strategy, Custom Criteria, and Combined Ranking"
            ]
            
            for feature in features:
                st.markdown(f"- {feature}")
                
            # Add example strategies explanation
            with st.expander("Strategy Explanations"):
                st.markdown("### Value & Momentum Strategy")
                st.markdown("""
                This strategy combines technical momentum with fundamental quality:
                
                **Technical Components (60%):**
                - Primary Trend: 40-week moving average (MA40)
                - Short-Term Momentum: 4-week moving average (MA4)
                - RSI Momentum: RSI above 50
                - Price Structure: Higher lows pattern
                - Relative Strength: Proximity to 52-week high
                - Breakout Detection: Recent breakout from consolidation
                
                **Fundamental Components (40%):**
                - Profitability: Company must be profitable
                - Reasonable Valuation: P/E ratio between 0-30
                - Growth: Positive revenue growth
                - Margin: Positive profit margin
                
                **Signals:**
                - BUY: Tech Score ≥ 70 AND passes fundamental check
                - SELL: Tech Score < 40 OR below MA40 (primary trend negative)
                - HOLD: Everything in between
                """)
                
                st.markdown("### Combined Ranking")
                st.markdown("""
                The Combined Ranking strategy calculates a comprehensive score (0-100) based on:
                
                - Technical Score (30%)
                - Primary Trend (10%)
                - Short-term Momentum (5%)
                - RSI Momentum (5%)
                - Relative Strength (5%)
                - Breakout Factor (5%)
                - Profitability (15%)
                - Reasonable P/E (10%)
                - Revenue Growth (10%)
                - Profit Margin (5%)
                
                Each factor contributes to the overall score, with stocks ranked from highest to lowest.
                """)
                
                st.markdown("### Custom Criteria")
                st.markdown("""
                Custom Criteria allows you to define your own scanning parameters using any combination of:
                
                - Technical filters (MA crossovers, RSI levels, breakouts, etc.)
                - Fundamental filters (P/E ratio, profit margins, revenue growth, etc.)
                - Sector/industry filters
                - Data source preferences
                
                Results are displayed without a specific ranking system but can be sorted by any metric.
                """)

# Fix tool for technical indicators
def fix_technical_indicators():
    """
    Fix the technical indicators in the current scanner results.
    This function recalculates technical indicators for stocks with missing data.
    """
    if 'scan_results' not in st.session_state or not st.session_state.scan_results:
        st.warning("No scan results to fix. Please run the scanner first.")
        return False

    # Get current scan results
    results = st.session_state.scan_results.copy()

    # Create progress indicators
    progress_bar = st.progress(0)
    status_text = st.empty()

    # Initialize data fetcher
    from data.stock_data import StockDataFetcher
    data_fetcher = StockDataFetcher()

    # Process each stock in the results
    updated_results = []

    # Get the period and interval from session state or use defaults
    period = '1y'
    interval = '1wk'

    for i, result in enumerate(results):
        ticker = result.get('ticker')
        if not ticker:
            updated_results.append(result)
            continue

        # Update progress
        progress = (i + 1) / len(results)
        progress_bar.progress(progress)
        status_text.info(f"Processing {ticker} ({i+1}/{len(results)})")

        try:
            # Check if technical indicators are missing or blank
            has_missing_indicators = (
                'tech_score' not in result or 
                result['tech_score'] is None or
                'above_ma40' not in result or
                result['above_ma40'] is None
            )
            
            if has_missing_indicators:
                # Get stock data
                stock_data = data_fetcher.get_stock_data(
                    ticker, timeframe=interval, period=period)

                if stock_data is None or stock_data.empty:
                    updated_results.append(result)
                    continue

                # Recalculate technical indicators
                from analysis.technical import calculate_all_indicators, generate_technical_signals
                
                indicators = calculate_all_indicators(stock_data)
                signals = generate_technical_signals(indicators)

                # Update result with new technical data
                result['tech_score'] = signals.get('tech_score', 0)
                result['above_ma40'] = signals.get('above_ma40', False)
                result['above_ma4'] = signals.get('above_ma4', False)
                result['rsi'] = signals.get('rsi', None)
                result['rsi_above_50'] = signals.get('rsi_above_50', False)
                result['near_52w_high'] = signals.get('near_52w_high', False)
                result['breakout'] = signals.get('breakout', False)
                result['signal'] = signals.get('overall_signal', 'HOLD')

            # Add to updated results
            updated_results.append(result)

        except Exception as e:
            st.warning(f"Error processing {ticker}: {e}")
            updated_results.append(result)

    # Complete progress
    progress_bar.progress(1.0)
    status_text.success("Technical indicators updated successfully!")

    # Update session state with fixed data
    st.session_state.scan_results = updated_results

    return True