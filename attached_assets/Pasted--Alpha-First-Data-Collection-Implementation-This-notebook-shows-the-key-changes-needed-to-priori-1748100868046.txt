# Alpha-First Data Collection Implementation
# This notebook shows the key changes needed to prioritize Alpha Vantage API

# ====================================================================================
# CELL 1: Updated Default Configuration
# ====================================================================================

# File: services/stock_data_manager.py (UPDATE)
# Change the default preferred source to Alpha Vantage

class StockDataManager:
    def __init__(self, db_storage):
        self.db_storage = db_storage
        
        # ✅ CHANGE 1: Default to Alpha Vantage instead of Yahoo
        self.preferred_source = st.session_state.get(
            'preferred_data_source', 'alphavantage'  # ← Changed from 'yahoo'
        )
        
        # ✅ CHANGE 2: Intelligent cache TTL based on API costs
        self.cache_ttl = {
            'fundamentals': 48,    # 48 hours (expensive Alpha Vantage calls)
            'daily_prices': 6,     # 6 hours (moderate cost)
            'weekly_prices': 24,   # 24 hours (lower priority)
            'intraday': 2          # 2 hours (most volatile)
        }
        
        # ✅ CHANGE 3: Data freshness based on data type
        self.data_freshness_hours = {
            'fundamentals': 48,    # Fundamentals change slowly
            'daily_prices': 6,     # Daily prices need regular updates
            'weekly_prices': 24,   # Weekly data less critical
            'intraday': 2          # Intraday needs frequent updates
        }

# ====================================================================================
# CELL 2: Enhanced Yahoo Finance Service with Rate Limiting
# ====================================================================================

# File: services/yahoo_finance_service.py (UPDATE)
import streamlit as st
import yfinance as yf
import time
from datetime import datetime, timedelta
import logging

# ✅ CHANGE 4: Add rate limiting for Yahoo Finance
YAHOO_RATE_LIMIT = {
    'calls_per_minute': 60,    # Conservative estimate
    'delay_between_calls': 1,  # 1 second between calls
    'retry_delays': [5, 10, 15] # Exponential backoff on rate limit
}

class YahooRateLimiter:
    def __init__(self):
        self.call_times = []
        self.last_call = None
    
    def wait_if_needed(self):
        """Implement rate limiting for Yahoo Finance"""
        now = datetime.now()
        
        # Remove calls older than 1 minute
        self.call_times = [t for t in self.call_times if (now - t).seconds < 60]
        
        # Check if we've hit the rate limit
        if len(self.call_times) >= YAHOO_RATE_LIMIT['calls_per_minute']:
            sleep_time = 60 - (now - self.call_times[0]).seconds
            if sleep_time > 0:
                logging.info(f"Yahoo Finance rate limit reached, waiting {sleep_time}s")
                time.sleep(sleep_time)
        
        # Ensure minimum delay between calls
        if self.last_call:
            time_since_last = (now - self.last_call).total_seconds()
            if time_since_last < YAHOO_RATE_LIMIT['delay_between_calls']:
                time.sleep(YAHOO_RATE_LIMIT['delay_between_calls'] - time_since_last)
        
        self.call_times.append(now)
        self.last_call = now

# Global rate limiter instance
_yahoo_limiter = YahooRateLimiter()

@st.cache_data(ttl=3600)  # 1-hour cache for fallback data
def fetch_ticker_info_safe(ticker_symbol, retry_count=0):
    """Yahoo Finance with rate limiting and retry logic"""
    try:
        _yahoo_limiter.wait_if_needed()
        
        ticker = yf.Ticker(ticker_symbol)
        info = ticker.info
        
        if not isinstance(info, dict):
            raise ValueError(f"No info returned for {ticker_symbol}")
            
        info['source'] = 'yahoo'
        return info
        
    except Exception as e:
        if retry_count < len(YAHOO_RATE_LIMIT['retry_delays']):
            delay = YAHOO_RATE_LIMIT['retry_delays'][retry_count]
            logging.warning(f"Yahoo Finance error for {ticker_symbol}, retrying in {delay}s: {e}")
            time.sleep(delay)
            return fetch_ticker_info_safe(ticker_symbol, retry_count + 1)
        else:
            logging.error(f"Yahoo Finance failed for {ticker_symbol} after all retries: {e}")
            raise

@st.cache_data(ttl=1800)  # 30-minute cache for price data
def fetch_history_safe(ticker_symbol, period="1y", interval="1wk", retry_count=0):
    """Yahoo Finance history with rate limiting"""
    try:
        _yahoo_limiter.wait_if_needed()
        
        ticker = yf.Ticker(ticker_symbol)
        df = ticker.history(period=period, interval=interval)
        
        if df.empty:
            raise ValueError(f"No data returned for {ticker_symbol}")
            
        df['source'] = 'yahoo'
        return df
        
    except Exception as e:
        if retry_count < len(YAHOO_RATE_LIMIT['retry_delays']):
            delay = YAHOO_RATE_LIMIT['retry_delays'][retry_count]
            logging.warning(f"Yahoo Finance history error for {ticker_symbol}, retrying in {delay}s: {e}")
            time.sleep(delay)
            return fetch_history_safe(ticker_symbol, period, interval, retry_count + 1)
        else:
            logging.error(f"Yahoo Finance history failed for {ticker_symbol} after all retries: {e}")
            raise

# ====================================================================================
# CELL 3: Intelligent Data Type Routing
# ====================================================================================

# File: services/stock_data_manager.py (UPDATE)
# Add intelligent caching based on data type

class StockDataManager:
    # ... (previous code)
    
    def _get_data_freshness_hours(self, data_type):
        """Get appropriate freshness threshold based on data type"""
        return self.data_freshness_hours.get(data_type, 6)  # Default 6 hours
    
    def _is_data_fresh(self, last_updated_str, data_type):
        """Check if data is fresh enough based on data type"""
        try:
            last_updated = datetime.fromisoformat(
                last_updated_str.replace('Z', '+00:00') 
                if last_updated_str.endswith('Z') 
                else last_updated_str
            )
            freshness_threshold = self._get_data_freshness_hours(data_type)
            return datetime.now() - last_updated < timedelta(hours=freshness_threshold)
        except:
            return False
    
    def fetch_ticker_info(self, ticker):
        """
        ✅ CHANGE 5: Enhanced ticker info with intelligent caching
        """
        try:
            if hasattr(ticker, 'ticker'):
                ticker = ticker.ticker

            # Check database cache with data-type-specific freshness
            db_data = self._load_fundamentals_from_db(ticker)
            if db_data and self._is_data_fresh(db_data['last_updated'], 'fundamentals'):
                logging.info(f"Using cached fundamental data for {ticker} (Alpha-first strategy)")
                return self._create_stock_from_db_data(ticker, db_data)

            # ✅ Alpha Vantage first (preferred)
            if self.preferred_source == 'alphavantage':
                try:
                    stock, info = alpha_fetch_info(ticker)
                    info['original_ticker'] = ticker
                    self._save_fundamentals_to_db(ticker, info, source='alphavantage')
                    logging.info(f"Fetched {ticker} from Alpha Vantage (primary)")
                    return stock, info
                except Exception as alpha_error:
                    logging.warning(f"Alpha Vantage failed for {ticker}: {alpha_error}")
                    
                    # ✅ Yahoo Finance fallback with safety
                    try:
                        info = fetch_ticker_info_safe(ticker)  # Use safe version
                        stock = LocalMockStock(ticker, info)
                        info['original_ticker'] = ticker
                        self._save_fundamentals_to_db(ticker, info, source='yahoo')
                        logging.info(f"Fetched {ticker} from Yahoo Finance (fallback)")
                        return stock, info
                    except Exception as yahoo_error:
                        # Use stale data if available
                        if db_data:
                            logging.warning(f"Using stale data for {ticker} - both APIs failed")
                            return self._create_stock_from_db_data(ticker, db_data)
                        raise RuntimeError(f"All sources failed for {ticker}: Alpha={alpha_error}, Yahoo={yahoo_error}")
            
            # If Yahoo is preferred (legacy support)
            else:
                # Similar logic but Yahoo first, Alpha Vantage second
                try:
                    info = fetch_ticker_info_safe(ticker)
                    stock = LocalMockStock(ticker, info)
                    # ... rest of logic
                except:
                    # Alpha Vantage fallback
                    pass
                    
        except Exception as e:
            logging.error(f"Error in fetch_ticker_info for {ticker}: {e}")
            raise

# ====================================================================================
# CELL 4: Quota Management for Alpha Vantage
# ====================================================================================

# File: services/alpha_vantage_quota_manager.py (NEW FILE)
import streamlit as st
from datetime import datetime, timedelta
import json
import os

class AlphaVantageQuotaManager:
    """Manage Alpha Vantage API quota to optimize usage"""
    
    def __init__(self):
        self.quota_file = "alpha_vantage_quota.json"
        self.daily_limit = 500  # Free tier limit
        self.minute_limit = 5   # Free tier limit
        self.load_quota_data()
    
    def load_quota_data(self):
        """Load quota tracking data"""
        try:
            if os.path.exists(self.quota_file):
                with open(self.quota_file, 'r') as f:
                    data = json.load(f)
                    self.daily_calls = data.get('daily_calls', 0)
                    self.last_reset = datetime.fromisoformat(data.get('last_reset', datetime.now().isoformat()))
                    self.minute_calls = data.get('minute_calls', [])
            else:
                self.daily_calls = 0
                self.last_reset = datetime.now()
                self.minute_calls = []
        except Exception:
            self.daily_calls = 0
            self.last_reset = datetime.now()
            self.minute_calls = []
    
    def save_quota_data(self):
        """Save quota tracking data"""
        try:
            data = {
                'daily_calls': self.daily_calls,
                'last_reset': self.last_reset.isoformat(),
                'minute_calls': self.minute_calls
            }
            with open(self.quota_file, 'w') as f:
                json.dump(data, f)
        except Exception as e:
            logging.warning(f"Failed to save quota data: {e}")
    
    def can_make_call(self):
        """Check if we can make an Alpha Vantage API call"""
        now = datetime.now()
        
        # Reset daily counter if it's a new day
        if now.date() > self.last_reset.date():
            self.daily_calls = 0
            self.last_reset = now
        
        # Clean up minute calls older than 1 minute
        one_minute_ago = now - timedelta(minutes=1)
        self.minute_calls = [t for t in self.minute_calls if datetime.fromisoformat(t) > one_minute_ago]
        
        # Check limits
        daily_ok = self.daily_calls < self.daily_limit
        minute_ok = len(self.minute_calls) < self.minute_limit
        
        return daily_ok and minute_ok
    
    def record_call(self):
        """Record an API call"""
        now = datetime.now()
        self.daily_calls += 1
        self.minute_calls.append(now.isoformat())
        self.save_quota_data()
    
    def get_quota_status(self):
        """Get current quota status for UI display"""
        now = datetime.now()
        one_minute_ago = now - timedelta(minutes=1)
        recent_calls = len([t for t in self.minute_calls if datetime.fromisoformat(t) > one_minute_ago])
        
        return {
            'daily_used': self.daily_calls,
            'daily_limit': self.daily_limit,
            'daily_remaining': self.daily_limit - self.daily_calls,
            'minute_used': recent_calls,
            'minute_limit': self.minute_limit,
            'minute_remaining': self.minute_limit - recent_calls
        }

# ====================================================================================
# CELL 5: App Configuration Update
# ====================================================================================

# File: app.py (UPDATE)
# Update default settings in the main app

def create_streamlit_app():
    # ... existing code ...
    
    # ✅ CHANGE 6: Update default data source preference
    if 'preferred_data_source' not in st.session_state:
        st.session_state.preferred_data_source = 'alphavantage'  # Default to Alpha Vantage
    
    # ✅ CHANGE 7: Initialize quota manager
    if 'alpha_quota_manager' not in st.session_state:
        st.session_state.alpha_quota_manager = AlphaVantageQuotaManager()
    
    # ... rest of existing code ...

# ====================================================================================
# CELL 6: UI Updates for Alpha-First Strategy
# ====================================================================================

# File: tabs/api_settings_component.py (UPDATE)
# Update the API settings UI to reflect Alpha-first strategy

def render_api_settings_section():
    st.subheader("API Settings")
    st.info("📊 **Alpha Vantage is now the preferred data source** for better reliability and data quality.")
    
    # Get current preference
    current_preference = st.session_state.get('preferred_data_source', 'alphavantage')
    
    # Updated radio buttons with Alpha Vantage as default
    data_source = st.radio(
        "Data Source Priority:",
        options=["Alpha Vantage First (Recommended)", "Yahoo Finance First"],
        index=0 if current_preference == 'alphavantage' else 1,
        help="Alpha Vantage provides more reliable data but requires an API key. Yahoo Finance is used as fallback."
    )
    
    # Map selection to internal value
    preferred_source = 'alphavantage' if data_source.startswith("Alpha Vantage") else 'yahoo'
    
    # Save preference if changed
    if preferred_source != current_preference:
        st.session_state.preferred_data_source = preferred_source
        st.success(f"✅ Priority set to {data_source}")
    
    # Show quota status if Alpha Vantage is primary
    if preferred_source == 'alphavantage':
        quota_manager = st.session_state.get('alpha_quota_manager')
        if quota_manager:
            quota_status = quota_manager.get_quota_status()
            
            st.subheader("📊 Alpha Vantage Quota Status")
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    "Daily Calls", 
                    f"{quota_status['daily_used']}/{quota_status['daily_limit']}",
                    f"{quota_status['daily_remaining']} remaining"
                )
            
            with col2:
                st.metric(
                    "Per Minute", 
                    f"{quota_status['minute_used']}/{quota_status['minute_limit']}",
                    f"{quota_status['minute_remaining']} available"
                )
            
            # Warning if quota is getting low
            if quota_status['daily_remaining'] < 50:
                st.warning("⚠️ Daily quota is running low. Consider upgrading your Alpha Vantage plan.")

# ====================================================================================
# CELL 7: Migration Instructions
# ====================================================================================

print("""
🚀 ALPHA-FIRST IMPLEMENTATION COMPLETE!

KEY CHANGES MADE:
✅ 1. Default data source changed to Alpha Vantage
✅ 2. Intelligent cache TTL based on API costs
✅ 3. Yahoo Finance fallback with rate limiting
✅ 4. Data type prioritization (fundamentals vs prices)
✅ 5. Quota management for Alpha Vantage
✅ 6. Enhanced error handling and logging

DEPLOYMENT STEPS:
1. Update services/stock_data_manager.py with new defaults
2. Add rate limiting to services/yahoo_finance_service.py  
3. Create services/alpha_vantage_quota_manager.py
4. Update tabs/api_settings_component.py
5. Update app.py with new session state defaults

BENEFITS:
🎯 More reliable data from Alpha Vantage
🛡️ Protected Yahoo Finance fallback with rate limiting
💰 Optimized API usage with intelligent caching
📊 Quota tracking prevents unexpected failures
⚡ Faster responses due to better caching strategy

TESTING CHECKLIST:
□ Verify Alpha Vantage API key is working
□ Test fallback to Yahoo Finance when Alpha Vantage fails
□ Check quota tracking in UI
□ Verify cache TTL is working correctly
□ Test with both US and Swedish stocks
""")