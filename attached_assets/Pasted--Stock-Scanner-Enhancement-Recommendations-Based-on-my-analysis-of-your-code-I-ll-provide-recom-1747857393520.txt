# Stock Scanner Enhancement Recommendations

Based on my analysis of your code, I'll provide recommendations to improve your stock scanner to better leverage both databases, implement a comprehensive ranking system, and add effective filters.

## 1. Database Integration Improvements

Currently, your scanner uses data from either SQLite or Supabase, but not necessarily both at once. Here's how to enhance the database integration:

### Create a Unified Data Access Layer

```python
def get_combined_data(tickers, use_supabase=True, use_sqlite=True):
    """
    Get data from both databases and combine results.
    
    Args:
        tickers (list): List of ticker symbols to analyze
        use_supabase (bool): Whether to use Supabase data
        use_sqlite (bool): Whether to use SQLite data
        
    Returns:
        dict: Combined data from both databases
    """
    combined_results = {}
    
    # First try Supabase if enabled
    if use_supabase:
        from data.supabase_client import get_supabase_db
        supabase_db = get_supabase_db()
        
        if supabase_db.is_connected():
            # Get data from Supabase
            for ticker in tickers:
                # Get stock data
                data = supabase_db.get_cached_stock_data(ticker, '1wk', '1y', 'yahoo')
                # Get fundamentals
                fundamentals = supabase_db.get_cached_fundamentals(ticker)
                
                if data is not None or fundamentals is not None:
                    combined_results[ticker] = {
                        'stock_data': data,
                        'fundamentals': fundamentals,
                        'source': 'supabase'
                    }
    
    # Then check SQLite for any missing data or if enabled
    if use_sqlite:
        from data.db_manager import get_cached_stock_data, get_cached_fundamentals
        
        for ticker in tickers:
            # Skip if we already have complete data for this ticker
            if ticker in combined_results and combined_results[ticker]['stock_data'] is not None and combined_results[ticker]['fundamentals'] is not None:
                continue
            
            # Get data from SQLite
            data = get_cached_stock_data(ticker, '1wk', '1y', 'yahoo')
            fundamentals = get_cached_fundamentals(ticker)
            
            if data is not None or fundamentals is not None:
                if ticker not in combined_results:
                    combined_results[ticker] = {
                        'stock_data': data,
                        'fundamentals': fundamentals, 
                        'source': 'sqlite'
                    }
                else:
                    # Combine with existing data
                    if combined_results[ticker]['stock_data'] is None and data is not None:
                        combined_results[ticker]['stock_data'] = data
                    if combined_results[ticker]['fundamentals'] is None and fundamentals is not None:
                        combined_results[ticker]['fundamentals'] = fundamentals
                    combined_results[ticker]['source'] = 'combined'
    
    return combined_results
```

## 2. Implement a Comprehensive Ranking System

Let's create a scoring system that ranks stocks based on both technical and fundamental factors:

```python
def rank_stocks(analysis_results):
    """
    Rank stocks based on a comprehensive scoring system.
    
    Args:
        analysis_results (list): List of stock analysis results
        
    Returns:
        list: Ranked analysis results
    """
    # Remove errors
    valid_results = [r for r in analysis_results if "error" not in r or r["error"] is None]
    
    if not valid_results:
        return []
    
    # Define scoring weights
    weights = {
        # Technical factors (60% of total score)
        'tech_score': 30,                 # Base technical score
        'above_ma40': 10,                 # Primary trend
        'above_ma4': 5,                   # Short-term momentum
        'rsi_above_50': 5,                # RSI momentum
        'near_52w_high': 5,               # Relative strength
        'breakout': 5,                    # Breakout factor
        
        # Fundamental factors (40% of total score)
        'is_profitable': 15,              # Profitability
        'reasonable_pe': 10,              # PE ratio is reasonable 
        'revenue_growth_positive': 10,    # Revenue growth
        'profit_margin_positive': 5       # Profit margin 
    }
    
    # Calculate scores
    for result in valid_results:
        total_score = 0
        applied_weights = 0
        
        # Calculate technical score component
        for factor, weight in weights.items():
            if factor in result:
                # For boolean factors
                if isinstance(result[factor], bool):
                    if result[factor]:
                        total_score += weight
                    applied_weights += weight
                # For numeric factors like tech_score
                elif factor == 'tech_score' and result[factor] is not None:
                    score_fraction = result[factor] / 100.0
                    total_score += weight * score_fraction
                    applied_weights += weight
                # For PE ratio factor
                elif factor == 'reasonable_pe':
                    pe_ratio = result.get('pe_ratio')
                    if pe_ratio is not None and 0 < pe_ratio < 30:  # Reasonable PE range
                        total_score += weight
                    applied_weights += weight
                # For revenue growth and profit margin
                elif factor == 'revenue_growth_positive':
                    growth = result.get('revenue_growth')
                    if growth is not None and growth > 0:
                        total_score += weight
                    applied_weights += weight
                elif factor == 'profit_margin_positive':
                    margin = result.get('profit_margin')
                    if margin is not None and margin > 0:
                        total_score += weight
                    applied_weights += weight
        
        # Calculate normalized score (0-100)
        if applied_weights > 0:
            normalized_score = (total_score / applied_weights) * 100
        else:
            normalized_score = 0
            
        # Add overall score to result
        result['overall_score'] = round(normalized_score, 1)
    
    # Sort by overall score (descending)
    ranked_results = sorted(valid_results, key=lambda x: x.get('overall_score', 0), reverse=True)
    
    # Add rank to each result
    for i, result in enumerate(ranked_results):
        result['rank'] = i + 1
    
    return ranked_results
```

## 3. Enhanced Filter System

Let's create a more comprehensive filter system that includes both technical and fundamental filters:

```python
class StockFilter:
    """
    Advanced filtering system for stock analysis results.
    """
    
    def __init__(self, analysis_results):
        """Initialize with analysis results."""
        self.all_results = analysis_results
        self.filtered_results = analysis_results
        self.applied_filters = []
    
    def reset_filters(self):
        """Reset all filters."""
        self.filtered_results = self.all_results
        self.applied_filters = []
        return self
    
    def apply_filter(self, filter_func, description):
        """Apply a filter function to the results."""
        self.filtered_results = list(filter(filter_func, self.filtered_results))
        self.applied_filters.append(description)
        return self
    
    # Technical filters
    
    def filter_by_tech_score(self, min_score=0, max_score=100):
        """Filter by technical score range."""
        return self.apply_filter(
            lambda x: "tech_score" in x and x["tech_score"] is not None and min_score <= x["tech_score"] <= max_score,
            f"Tech Score between {min_score} and {max_score}"
        )
    
    def filter_by_rsi(self, min_rsi=0, max_rsi=100):
        """Filter by RSI value range."""
        return self.apply_filter(
            lambda x: "rsi" in x and x["rsi"] is not None and min_rsi <= x["rsi"] <= max_rsi,
            f"RSI between {min_rsi} and {max_rsi}"
        )
    
    def filter_above_ma40(self, above=True):
        """Filter stocks above/below MA40."""
        return self.apply_filter(
            lambda x: "above_ma40" in x and x["above_ma40"] == above,
            f"{'Above' if above else 'Below'} MA40"
        )
    
    def filter_above_ma4(self, above=True):
        """Filter stocks above/below MA4."""
        return self.apply_filter(
            lambda x: "above_ma4" in x and x["above_ma4"] == above,
            f"{'Above' if above else 'Below'} MA4"
        )
    
    def filter_by_signal(self, signals=None):
        """Filter by buy/sell/hold signal."""
        if signals is None:
            signals = ["BUY", "SELL", "HOLD"]
        
        return self.apply_filter(
            lambda x: "signal" in x and x["signal"] in signals,
            f"Signal is one of {', '.join(signals)}"
        )
    
    def filter_near_52w_high(self, near=True):
        """Filter stocks near 52-week high."""
        return self.apply_filter(
            lambda x: "near_52w_high" in x and x["near_52w_high"] == near,
            f"{'Near' if near else 'Not near'} 52-week high"
        )
    
    def filter_breakout(self, has_breakout=True):
        """Filter stocks with recent breakout."""
        return self.apply_filter(
            lambda x: "breakout" in x and x["breakout"] == has_breakout,
            f"{'Has' if has_breakout else 'No'} recent breakout"
        )
    
    # Fundamental filters
    
    def filter_by_pe_ratio(self, min_pe=0, max_pe=100):
        """Filter by P/E ratio range."""
        return self.apply_filter(
            lambda x: "pe_ratio" in x and x["pe_ratio"] is not None and min_pe <= x["pe_ratio"] <= max_pe,
            f"P/E ratio between {min_pe} and {max_pe}"
        )
    
    def filter_profitable(self, profitable=True):
        """Filter profitable companies."""
        return self.apply_filter(
            lambda x: "is_profitable" in x and x["is_profitable"] == profitable,
            f"{'Profitable' if profitable else 'Not profitable'} companies"
        )
    
    def filter_by_profit_margin(self, min_margin=0):
        """Filter by minimum profit margin."""
        return self.apply_filter(
            lambda x: "profit_margin" in x and x["profit_margin"] is not None and x["profit_margin"] >= min_margin,
            f"Profit margin >= {min_margin*100}%"
        )
    
    def filter_by_revenue_growth(self, min_growth=0):
        """Filter by minimum revenue growth."""
        return self.apply_filter(
            lambda x: "revenue_growth" in x and x["revenue_growth"] is not None and x["revenue_growth"] >= min_growth,
            f"Revenue growth >= {min_growth*100}%"
        )
    
    # Combined filters
    
    def filter_by_overall_score(self, min_score=0, max_score=100):
        """Filter by overall score range."""
        return self.apply_filter(
            lambda x: "overall_score" in x and x["overall_score"] is not None and min_score <= x["overall_score"] <= max_score,
            f"Overall score between {min_score} and {max_score}"
        )
    
    def filter_by_data_source(self, sources=None):
        """Filter by data source."""
        if sources is None:
            sources = ["yahoo", "alphavantage", "local"]
        
        return self.apply_filter(
            lambda x: "data_source" in x and x["data_source"] in sources,
            f"Data source is one of {', '.join(sources)}"
        )
    
    def filter_by_sector(self, sectors=None):
        """Filter by sector."""
        if sectors is None or len(sectors) == 0:
            return self
        
        return self.apply_filter(
            lambda x: "sector" in x and x["sector"] in sectors,
            f"Sector is one of {', '.join(sectors)}"
        )
    
    def filter_by_exchange(self, exchanges=None):
        """Filter by exchange."""
        if exchanges is None or len(exchanges) == 0:
            return self
        
        return self.apply_filter(
            lambda x: "exchange" in x and x["exchange"] in exchanges,
            f"Exchange is one of {', '.join(exchanges)}"
        )
    
    def get_results(self):
        """Get filtered results."""
        return self.filtered_results
    
    def get_applied_filters(self):
        """Get list of applied filters."""
        return self.applied_filters
```

## 4. UI Enhancements for the Scanner

Now, let's enhance the scanner UI with our new functionality: